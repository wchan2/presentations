UML: Class Diagram
Diagramming your application classes

William Chan
Lead Platform Engineer, 605.tv, Capital One, FreeWheel (Comcast)
http://linkedin.com/in/wchan2

* Objectives

- Learn how to sketch your application components in a class diagram
- Learn what components are in a class diagram

* UML Class Diagrams

Lays out the sketches of classes, namely the follow

- The relationships of different classes, methods and instance variables
- *Public*, *private* and *protected* instance variables
- *Public*, *private* and *protected* instance methods

* Use Case Diagram components

*Components*

- Packages - logical grouping of different classes that carry a common behavior
- Classes - classes that produces logical units of objects

*Relations*

- Extension - a class inherits from another class
- Composition - a class is composed of an object of another class

Note: _Terminology_is_taken_from_the_PlantUML_language_

* PlantUML Class Diagram Documentation

Documentation: http://plantuml.com/class-diagram

* Diagram Tutorial

* Simple Class Example

.image images/uml_simple_class_example.png

* Simple Class Code

.code code/uml_simple_class_example.wsd

* Modifiers Legend

.image images/modifiers_legend.png

* Abstract Classes and Interfaces

* Abstract Class Example

An abstract class is a class with one of more abstract methods, methods without implementation where a class that extends it should implement the abstract method.

Note: objects can not be created from abstract classes

.image images/uml_abstract_class_example.png

* Abstract Class Code

.code code/uml_abstract_class_example.wsd

* Interface Example

Interfaces don't have implementations but is a contract for which the class that *implements* it needs to adhere to, namely the parameter and return types.

.image images/uml_interface_example.png

* Interface Code

.code code/uml_interface_example.wsd

* Class Relations

* Class Inheritance Example

Inheritance represents the *is* *a* relationship. For instance, a cat or a dog is a mammal.

.image images/uml_class_inheritance_example.png

* Class Inheritance Code

.code code/uml_class_inheritance_example.wsd

* Class Composition Example

Composition represents the *has* *an* *instance* relationship. For instance, a car has an engine.

.image images/uml_class_composition_example.png

* Class Composition Code

.code code/uml_class_composition_example.wsd

* Packages

* What are packages?

Packages are a way to organize class that are similar in functionality because it works with the same domain.

For instance, an application may have third party API integrations and can group all APIs by functional aspect. They may also be grouped to a specific domain, such as a package for Twitter integration and another package for Microsoft integrations.

* Packages Example

.image images/uml_packages_example.png

* Packages Code

.code code/uml_packages_example.wsd

* A More Complete Example

* UML Example: E-commerce Diagrams

.image images/uml_class_diagram_code_example.png

* UML Example: E-commerce Diagram PlantUML Code

.code code/uml_class_diagram_code_example.wsd

* Summary

- Class diagrams help you visualize the components that make up your application
